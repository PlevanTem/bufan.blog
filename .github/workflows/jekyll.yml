name: Build and Deploy to Github Pages

on:
  push:
    branches:
      - master

jobs:
  build_and_deploy:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      ########################################################################
      # 关键调整1：提前下载通用CA证书（curl的证书包更完整），并在所有步骤前准备好
      ########################################################################
      - name: Download updated cacert.pem (通用CA证书)
        run: |
          # 下载curl维护的最新CA证书集合（包含完整CRL信息）
          curl -o cacert.pem https://curl.se/ca/cacert.pem
          # 显示证书路径，方便调试
          echo "证书路径: $(pwd)/cacert.pem"

      ########################################################################
      # 关键调整2：平台证书补充（保留，但确保在依赖安装前执行）
      ########################################################################
      - name: Linux 安装并刷新 SSL 证书
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ca-certificates
          sudo update-ca-certificates --fresh

      - name: Windows 安装并刷新 SSL 证书
        if: matrix.os == 'windows-latest'
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco install -y ca-certificates --no-progress
          Update-SystemCaCertificateStore

      ########################################################################
      # 步骤2：配置 Ruby 环境
      ########################################################################
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.0
          bundler-cache: false

      ########################################################################
      # 步骤3：添加平台支持
      ########################################################################
      - name: Add Linux platform to Gemfile.lock
        if: matrix.os == 'ubuntu-latest'
        run: bundle lock --add-platform x86_64-linux
        
      - name: 为 Windows 平台添加支持
        if: matrix.os == 'windows-latest'
        run: bundle lock --add-platform x64-mingw-ucrt
          
      ########################################################################
      # 关键调整3：安装依赖时强制使用下载的CA证书
      ########################################################################
      - name: Install dependencies with SSL cert (Linux)
        if: matrix.os == 'ubuntu-latest'  # 仅 Linux 执行
        run: |
            # Linux (bash) 语法：变量赋值无 $，等号无空格
            certPath="$(pwd)/cacert.pem"
            echo "Using SSL certificate: $certPath"
            export SSL_CERT_FILE="$certPath"  # bash 中设置环境变量
            bundle install --jobs 4 --retry 3
        shell: bash

      - name: Install dependencies with SSL cert (Windows)
        if: matrix.os == 'windows-latest'  # 仅 Windows 执行
        run: |
            # Windows (PowerShell) 语法：变量用 $ 定义
            $certPath = "$(Get-Location)/cacert.pem"
            Write-Host "Using SSL certificate: $certPath"
            $env:SSL_CERT_FILE = $certPath  # PowerShell 中设置环境变量
            bundle install --jobs 4 --retry 3
        shell: pwsh

      - uses: actions/cache@v4
        with:
          path: |
            .asdf/**
            vendor/bundle
          key: ${{ runner.os }}-cache-${{ hashFiles('**/cache.key') }}
          restore-keys: |
            ${{ runner.os }}-cache-

      ########################################################################
      # 关键调整4：构建时明确使用下载的CA证书（覆盖系统默认路径）
      ########################################################################
      - name: Build site with SSL cert
        run: |
            # 根据平台动态获取当前目录并设置证书路径
            if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
              # Linux 用 bash 语法
              certPath="$(pwd)/cacert.pem"
              export SSL_CERT_FILE="$certPath"
            else
              # Windows 用 PowerShell 语法
              $certPath = "$(Get-Location)/cacert.pem"
              $env:SSL_CERT_FILE = $certPath
            fi
            # 打印证书路径用于调试
            echo "Using SSL certificate: $SSL_CERT_FILE"
            # 执行构建
            bundle exec jekyll build --trace
         
      - uses: jeffreytse/jekyll-deploy-action@v0.6.0
        with:
          provider: 'github'
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: 'gh-pages'
          args: '--trace'