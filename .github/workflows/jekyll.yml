name: Build and Deploy to Github Pages

on:
  push:
    branches:
      - master

jobs:
  build_and_deploy:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      ########################################################################
      # 关键调整1：提前下载通用CA证书（curl的证书包更完整），并在所有步骤前准备好
      ########################################################################
      - name: Download updated cacert.pem (通用CA证书)
        run: |
          # 下载curl维护的最新CA证书集合（包含完整CRL信息）
          curl -o cacert.pem https://curl.se/ca/cacert.pem
          # 显示证书路径，方便调试
          echo "证书路径: $(pwd)/cacert.pem"

      ########################################################################
      # 关键调整2：平台证书补充（保留，但确保在依赖安装前执行）
      ########################################################################
      - name: Linux 安装并刷新 SSL 证书
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ca-certificates
          sudo update-ca-certificates --fresh

      - name: Windows 安装并刷新 SSL 证书
        if: matrix.os == 'windows-latest'
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco install -y ca-certificates --no-progress
          Update-SystemCaCertificateStore

      ########################################################################
      # 步骤2：配置 Ruby 环境
      ########################################################################
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.0
          bundler-cache: false

      ########################################################################
      # 步骤3：添加平台支持
      ########################################################################
      - name: Add Linux platform to Gemfile.lock
        if: matrix.os == 'ubuntu-latest'
        run: bundle lock --add-platform x86_64-linux
        
      - name: 为 Windows 平台添加支持
        if: matrix.os == 'windows-latest'
        run: bundle lock --add-platform x64-mingw-ucrt
          
      ########################################################################
      # 关键调整3：安装依赖时强制使用下载的CA证书
      ########################################################################
      - uses: actions/cache@v4
        with:
          path: |
            .asdf/**
            vendor/bundle
          key: ${{ runner.os }}-cache-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-cache-
            
      # 安装依赖（强制使用下载的CA证书）
      - name: Install dependencies with SSL cert (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          certPath="${{ github.workspace }}/cacert.pem"
          echo "Using SSL certificate: $certPath"
          export SSL_CERT_FILE="$certPath"
          bundle install --jobs 4 --retry 3
        shell: bash

      - name: Install dependencies with SSL cert (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $rubyCertPath = ruby -ropenssl -e "puts OpenSSL::X509::DEFAULT_CERT_FILE"
          Write-Host "Ruby default cert path: $rubyCertPath"
          Copy-Item -Path "${{ github.workspace }}/cacert.pem" -Destination "$rubyCertPath" -Force
          Get-Item "$rubyCertPath"  # 闭合引号
        shell: pwsh

      ########################################################################
      # 关键调整4：构建时明确使用下载的CA证书（分平台处理环境变量）
      ########################################################################
      - name: Build site (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          certPath="${{ github.workspace }}/cacert.pem"
          export SSL_CERT_FILE="$certPath"
          echo "Using SSL certificate: $SSL_CERT_FILE"
          bundle exec jekyll build --trace
        shell: bash

      - name: Build site (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $certPath = "${{ github.workspace }}/cacert.pem"
          $env:SSL_CERT_FILE = $certPath
          Write-Host "Using SSL certificate: $env:SSL_CERT_FILE"
          bundle exec jekyll build --trace
        shell: pwsh
      
      #############################
      # 步骤4：部署
      #############################
      - uses: jeffreytse/jekyll-deploy-action@v0.6.0
        with:
          provider: 'github'
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: 'gh-pages'
          args: '--trace'